import cmath

def solve_quadratic(a, b, c):
    # Calculate the discriminant
    discriminant = b**2 - 4*a*c
    
    # Compute the roots using the quadratic formula
    if discriminant > 0:
        # Two distinct real roots
        root1 = (-b + cmath.sqrt(discriminant)) / (2*a)
        root2 = (-b - cmath.sqrt(discriminant)) / (2*a)
        return (root1, root2)
    elif discriminant == 0:
        # One real root (repeated)
        root = -b / (2*a)
        return (root,)
    else:
        # Two complex roots
        real_part = -b / (2*a)
        imaginary_part = cmath.sqrt(-discriminant) / (2*a)
        root1 = complex(real_part, imaginary_part)
        root2 = complex(real_part, -imaginary_part)
        return (root1, root2)

def main():
    
    a = float(input("Enter coefficient a: "))
    b = float(input("Enter coefficient b: "))
    c = float(input("Enter coefficient c: "))
    

    roots = solve_quadratic(a, b, c)
    
    
    if len(roots) == 2:
        root1, root2 = roots
        if isinstance(root1, complex) and isinstance(root2, complex):
            print(f"Root 1: Real part: {root1.real:.2f}, Imaginary part: {root1.imag:.2f}")
            print(f"Root 2: Real part: {root2.real:.2f}, Imaginary part: {root2.imag:.2f}")
        else:
            print(f"Root 1: {root1:.2f}")
            print(f"Root 2: {root2:.2f}")
    elif len(roots) == 1:
        print(f"Root: {roots[0]:.2f}")

if __name__ == "__main__":
    main()
